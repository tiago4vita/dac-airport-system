services:
  front-end:
    build:
      context: ./front-end
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:3000
    depends_on:
      - api-gateway
    networks:
      - airport-network

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - PORT=3001
      - ORCHESTRATOR_URL=http://orchestrator:3002
      - PASSWORD_SALT=airport-system-salt
    depends_on:
      - orchestrator
      - rabbitmq
    networks:
      - airport-network

  orchestrator:
    build:
      context: ./orchestrator
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    environment:
      - PORT=3002
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=user
      - SPRING_RABBITMQ_PASSWORD=password
    depends_on:
      - rabbitmq
    networks:
      - airport-network

  mongodb:
    image: mongo:6
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      - MONGO_INITDB_DATABASE=auth
    command: mongod --quiet --logpath /dev/null
    restart: always
    networks:
      - airport-network

  ms-auth:
    build:
      context: ./services/ms-auth
      dockerfile: Dockerfile
    container_name: ms-auth
    ports:
      - "8080:8080"
    environment:
      - SPRING_DATA_MONGODB_URI=mongodb://mongodb:27017/auth
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=user
      - SPRING_RABBITMQ_PASSWORD=password
    depends_on:
      - mongodb
      - rabbitmq
    restart: on-failure
    networks:
      - airport-network

  ms-cliente:
    build:
      context: ./services/ms-cliente
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-cliente:5432/cliente_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=user
      - SPRING_RABBITMQ_PASSWORD=password
    depends_on:
      - postgres-cliente
      - rabbitmq
    networks:
      - airport-network

  postgres-cliente:
    image: postgres:16
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=cliente_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_cliente_data:/var/lib/postgresql/data
    networks:
      - airport-network

  ms-func:
    build:
      context: ./services/ms-func
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-func:5432/func_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=user
      - SPRING_RABBITMQ_PASSWORD=password
    depends_on:
      - postgres-func
      - rabbitmq
    networks:
      - airport-network

  postgres-func:
    image: postgres:16
    ports:
      - "5437:5432"
    environment:
      - POSTGRES_DB=func_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_func_data:/var/lib/postgresql/data
      - ./services/ms-func/src/main/resources/db/init:/docker-entrypoint-initdb.d
    networks:
      - airport-network

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"  # AMQP port
      - "15672:15672"  # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password
    networks:
      - airport-network

  ms-voo:
    build:
      context: ./services/ms-voo
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-voo:5432/voo_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=user
      - SPRING_RABBITMQ_PASSWORD=password
    depends_on:
      - postgres-voo
      - rabbitmq
    networks:
      - airport-network

  postgres-voo:
    image: postgres:16
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_DB=voo_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_voo_data:/var/lib/postgresql/data
      - ./services/ms-voo/src/main/resources/db/init:/docker-entrypoint-initdb.d
    networks:
      - airport-network

  ms-reserva:
    build:
      context: ./services/ms-reserva
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    environment:
      - SPRING_DATASOURCE_COMMAND_URL=jdbc:postgresql://postgres-reserva-command:5432/reserva_command_db
      - SPRING_DATASOURCE_QUERY_URL=jdbc:postgresql://postgres-reserva-query:5432/reserva_query_db
      - SPRING_DATASOURCE_COMMAND_USERNAME=postgres
      - SPRING_DATASOURCE_COMMAND_PASSWORD=postgres
      - SPRING_DATASOURCE_QUERY_USERNAME=postgres
      - SPRING_DATASOURCE_QUERY_PASSWORD=postgres
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=user
      - SPRING_RABBITMQ_PASSWORD=password
    depends_on:
      - postgres-reserva-command
      - postgres-reserva-query
      - rabbitmq
    networks:
      - airport-network

  postgres-reserva-command:
    image: postgres:16
    ports:
      - "5435:5432"
    environment:
      - POSTGRES_DB=reserva_command_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_reserva_command_data:/var/lib/postgresql/data
      - ./services/ms-reserva/src/main/resources/db/init/01-init-command-db.sql:/docker-entrypoint-initdb.d/01-init-command-db.sql
    networks:
      - airport-network

  postgres-reserva-query:
    image: postgres:16
    ports:
      - "5436:5432"
    environment:
      - POSTGRES_DB=reserva_query_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_reserva_query_data:/var/lib/postgresql/data
      - ./services/ms-reserva/src/main/resources/db/init/02-init-query-db.sql:/docker-entrypoint-initdb.d/02-init-query-db.sql
    networks:
      - airport-network

networks:
  airport-network:
    driver: bridge

volumes:
  mongodb_data:
  postgres_cliente_data:
  postgres_func_data:
  postgres_voo_data:
  postgres_reserva_command_data:
  postgres_reserva_query_data: