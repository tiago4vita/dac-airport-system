package com.tads.airport_system.msreserva.service;

import com.tads.airport_system.msreserva.model.Reserva;
import com.tads.airport_system.msreserva.model.EstadoReserva;
import com.tads.airport_system.msreserva.model.AlteracaoEstadoReserva;
import com.tads.airport_system.msreserva.repository.ReservaRepository;
import com.tads.airport_system.msreserva.repository.EstadoReservaRepository;
import com.tads.airport_system.msreserva.repository.AlteracaoEstadoReservaRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.Optional;

/**
 * Service for handling command operations on the command database.
 * This service is part of the CQRS pattern and handles all write operations.
 */
@Service
@Transactional(transactionManager = "commandTransactionManager")
public class ReservaCommandService {

    private final ReservaRepository reservaRepository;
    private final EstadoReservaRepository estadoReservaRepository;
    private final AlteracaoEstadoReservaRepository alteracaoEstadoReservaRepository;

    @Autowired
    public ReservaCommandService(
            ReservaRepository reservaRepository,
            EstadoReservaRepository estadoReservaRepository,
            AlteracaoEstadoReservaRepository alteracaoEstadoReservaRepository) {
        this.reservaRepository = reservaRepository;
        this.estadoReservaRepository = estadoReservaRepository;
        this.alteracaoEstadoReservaRepository = alteracaoEstadoReservaRepository;
    }

    /**
     * Create a new reservation
     * @param vooId the flight ID
     * @param clienteId the client ID
     * @return the created reservation
     */
    public Reserva createReserva(String vooId, String clienteId) {
        EstadoReserva estadoCriada = estadoReservaRepository.findByCodigoEstado(EstadoReserva.Estado.CRIADA.name());
        
        Reserva reserva = new Reserva(
            null, // ID will be generated by JPA
            vooId,
            clienteId,
            estadoCriada,
            LocalDateTime.now()
        );

        return reservaRepository.save(reserva);
    }

    /**
     * Cancel a reservation
     * @param reservaId the reservation ID
     * @return the updated reservation
     */
    public Optional<Reserva> cancelReserva(String reservaId) {
        Optional<Reserva> optionalReserva = reservaRepository.findById(reservaId);
        
        if (optionalReserva.isPresent()) {
            Reserva reserva = optionalReserva.get();
            EstadoReserva estadoAtual = reserva.getEstado();

            // Check if reservation can be cancelled
            if (estadoAtual.getCodigoEstado().equals(EstadoReserva.Estado.CRIADA.name()) || 
                estadoAtual.getCodigoEstado().equals(EstadoReserva.Estado.CHECK_IN.name())) {

                EstadoReserva estadoCancelada = estadoReservaRepository.findByCodigoEstado(EstadoReserva.Estado.CANCELADA.name());
                reserva.atualizarEstado(estadoCancelada);
                
                return Optional.of(reservaRepository.save(reserva));
            }
        }
        
        return Optional.empty();
    }

    /**
     * Perform check-in for a reservation
     * @param reservaId the reservation ID
     * @return the updated reservation
     */
    public Optional<Reserva> realizarCheckIn(String reservaId) {
        Optional<Reserva> optionalReserva = reservaRepository.findById(reservaId);
        
        if (optionalReserva.isPresent()) {
            Reserva reserva = optionalReserva.get();
            EstadoReserva estadoAtual = reserva.getEstado();

            // Check if reservation can be checked in (must be CRIADA and not CANCELADA)
            if (estadoAtual.getCodigoEstado().equals(EstadoReserva.Estado.CRIADA.name())) {

                EstadoReserva estadoCheckIn = estadoReservaRepository.findByCodigoEstado(EstadoReserva.Estado.CHECK_IN.name());
                reserva.atualizarEstado(estadoCheckIn);
                
                return Optional.of(reservaRepository.save(reserva));
            }
        }
        
        return Optional.empty();
    }

    /**
     * Find a reservation by ID (for internal use only)
     * @param id the reservation ID
     * @return Optional containing the reservation if found
     */
    @Transactional(transactionManager = "commandTransactionManager", readOnly = true)
    public Optional<Reserva> findById(String id) {
        return reservaRepository.findById(id);
    }

    /**
     * Save a reservation
     * @param reserva the reservation to save
     * @return the saved reservation
     */
    public Reserva save(Reserva reserva) {
        return reservaRepository.save(reserva);
    }
} 